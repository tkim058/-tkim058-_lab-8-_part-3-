
[tkim058]_lab[8]_part[3].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000844  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a0  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000244  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000411  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001825  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	08 d0       	rcall	.+16     	; 0xaa <main>
  9a:	16 c0       	rjmp	.+44     	; 0xc8 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <ADC_init>:


#include <avr/io.h>

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 6e       	ori	r24, 0xE0	; 224
  a6:	80 83       	st	Z, r24
  a8:	08 95       	ret

000000aa <main>:
	//        the previous conversion completes.
}

int main(void)
{
	DDRB = 0xFF; PORTB = 0x00;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 b9       	out	0x04, r24	; 4
  ae:	15 b8       	out	0x05, r1	; 5
	
	ADC_init();
  b0:	f6 df       	rcall	.-20     	; 0x9e <ADC_init>
	
	while (1)
	{
		if(ADC >= 0x000E/2)
  b2:	e8 e7       	ldi	r30, 0x78	; 120
  b4:	f0 e0       	ldi	r31, 0x00	; 0
		{
			PORTB = 0x01;
  b6:	21 e0       	ldi	r18, 0x01	; 1
	
	ADC_init();
	
	while (1)
	{
		if(ADC >= 0x000E/2)
  b8:	80 81       	ld	r24, Z
  ba:	91 81       	ldd	r25, Z+1	; 0x01
  bc:	07 97       	sbiw	r24, 0x07	; 7
  be:	10 f0       	brcs	.+4      	; 0xc4 <main+0x1a>
		{
			PORTB = 0x01;
  c0:	25 b9       	out	0x05, r18	; 5
  c2:	fa cf       	rjmp	.-12     	; 0xb8 <main+0xe>
		}
		else
		{
			PORTB = 0x00;
  c4:	15 b8       	out	0x05, r1	; 5
  c6:	f8 cf       	rjmp	.-16     	; 0xb8 <main+0xe>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
